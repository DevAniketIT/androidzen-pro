version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: androidzen-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-androidzen}
      POSTGRES_USER: ${POSTGRES_USER:-androidzen_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - androidzen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-androidzen_user} -d ${POSTGRES_DB:-androidzen}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: androidzen-redis-dev
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - androidzen-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: androidzen-backend-dev
    environment:
      - ENVIRONMENT=development
      - DEBUG=True
      - DATABASE_URL=postgresql://${POSTGRES_USER:-androidzen_user}:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/${POSTGRES_DB:-androidzen}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./backend:/app/backend
      - ./database:/app/database
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    networks:
      - androidzen-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        # Wait for database to be ready
        python -c 'import time; import psycopg2; 
        for i in range(30): 
          try: psycopg2.connect(\"postgresql://${POSTGRES_USER:-androidzen_user}:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/${POSTGRES_DB:-androidzen}\"); break
          except: time.sleep(1)
        else: exit(1)'
        
        # Run database migrations
        alembic upgrade head
        
        # Start the application with hot reload
        uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: androidzen-frontend-dev
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - androidzen-network
    depends_on:
      backend:
        condition: service_healthy
    command: npm start

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: androidzen-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@androidzen.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - androidzen-network
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: androidzen-redis-commander-dev
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-dev_redis_password}
    ports:
      - "8081:8081"
    networks:
      - androidzen-network
    depends_on:
      - redis
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  androidzen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
