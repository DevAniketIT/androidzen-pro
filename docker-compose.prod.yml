version: '3.8'

services:
  # Production PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: androidzen-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - androidzen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Redis Cache
  redis:
    image: redis:7-alpine
    container_name: androidzen-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - androidzen-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: androidzen-backend-prod
    environment:
      - ENVIRONMENT=production
      - DEBUG=False
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - HOST=0.0.0.0
      - PORT=8000
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${PRODUCTION_URL},${FRONTEND_URL}
      - LOG_LEVEL=INFO
      - ENABLE_DEBUG_TOOLBAR=False
      - ENABLE_TESTING_ENDPOINTS=False
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./database/backups:/app/backups
    networks:
      - androidzen-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        # Wait for database to be ready
        python -c 'import time; import psycopg2; 
        for i in range(60): 
          try: psycopg2.connect(\"postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}\"); break
          except: time.sleep(2)
        else: exit(1)'
        
        # Run database migrations
        alembic upgrade head
        
        # Start the application with Gunicorn
        gunicorn backend.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --access-logfile - --error-logfile -
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Production Frontend (Nginx serving static files)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: androidzen-frontend-prod
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - androidzen-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring: Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: androidzen-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - androidzen-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring: Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: androidzen-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - androidzen-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation: Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: androidzen-loki-prod
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - androidzen-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: androidzen-backup-prod
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - androidzen-network
    depends_on:
      - postgres
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
        # Create backup directory
        mkdir -p /backups
        
        # Run backup script periodically (every 6 hours)
        while true; do
          /backup.sh
          sleep 21600
        done
      "
    restart: unless-stopped
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  androidzen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Health check and deployment verification
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s
